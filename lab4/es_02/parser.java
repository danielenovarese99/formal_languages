
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\004\000\002\002\005\000\002\002" +
    "\005\000\002\003\005\000\002\003\003\000\002\004\004" +
    "\000\002\005\003\000\002\005\003\000\002\006\005\000" +
    "\002\006\003\000\002\007\003\000\002\007\006\000\002" +
    "\007\006\000\002\007\006\000\002\007\006\000\002\010" +
    "\004\000\002\010\003\000\002\011\004\000\002\011\003" +
    "\000\002\011\004\000\002\012\005\000\002\012\005\000" +
    "\002\014\002\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\017\006\000\002\017\006\000" +
    "\002\017\006\000\002\013\006\000\002\013\006\000\002" +
    "\013\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\104\000\010\003\006\021\004\022\011\001\002\000" +
    "\004\020\ufffb\001\002\000\004\002\106\001\002\000\004" +
    "\023\104\001\002\000\004\020\024\001\002\000\004\023" +
    "\013\001\002\000\004\020\ufffa\001\002\000\004\023\ufffd" +
    "\001\002\000\014\020\024\021\004\022\011\026\023\027" +
    "\017\001\002\000\004\023\102\001\002\000\004\023\ufffe" +
    "\001\002\000\012\002\uffef\020\uffef\026\uffef\027\uffef\001" +
    "\002\000\004\007\071\001\002\000\012\002\000\020\024" +
    "\026\023\027\017\001\002\000\004\023\067\001\002\000" +
    "\006\005\053\011\064\001\002\000\006\003\026\007\027" +
    "\001\002\000\032\003\ufff7\004\ufff7\005\ufff7\010\ufff7\011" +
    "\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\023\ufff7\024\ufff7" +
    "\025\ufff7\001\002\000\012\002\ufff1\020\ufff1\026\ufff1\027" +
    "\ufff1\001\002\000\026\010\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\016\030\017\034\020\024\024\uffeb\025\uffeb\001" +
    "\002\000\030\003\uffeb\010\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\016\030\017\034\020\024\024\uffeb\025\uffeb\001" +
    "\002\000\024\003\uffe1\010\uffe1\012\uffe1\013\uffe1\014\uffe1" +
    "\015\uffe1\023\uffe1\024\uffe1\025\uffe1\001\002\000\024\003" +
    "\uffe4\010\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\001\002\000\026\003\uffe3\005\053\010" +
    "\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\023\uffe3\024\uffe3" +
    "\025\uffe3\001\002\000\022\003\037\010\035\012\044\013" +
    "\041\014\043\015\040\024\042\025\036\001\002\000\024" +
    "\003\uffe2\010\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\023" +
    "\uffe2\024\uffe2\025\uffe2\001\002\000\012\002\uffe0\020\uffe0" +
    "\026\uffe0\027\uffe0\001\002\000\010\016\030\017\034\020" +
    "\024\001\002\000\012\002\uffde\020\uffde\026\uffde\027\uffde" +
    "\001\002\000\010\016\030\017\034\020\024\001\002\000" +
    "\010\016\030\017\034\020\024\001\002\000\010\016\030" +
    "\017\034\020\024\001\002\000\010\016\030\017\034\020" +
    "\024\001\002\000\010\016\030\017\034\020\024\001\002" +
    "\000\024\003\uffe6\010\uffe6\012\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\023\uffe6\024\uffe6\025\uffe6\001\002\000\024\003\uffe9" +
    "\010\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\001\002\000\024\003\uffe7\010\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\023\uffe7\024\uffe7\025\uffe7\001" +
    "\002\000\024\003\uffe5\010\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\023\uffe5\024\uffe5\025\uffe5\001\002\000\024\003" +
    "\uffea\010\uffea\012\uffea\013\uffea\014\uffea\015\uffea\023\uffea" +
    "\024\uffea\025\uffea\001\002\000\024\003\uffe8\010\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\001\002\000\006\017\055\020\054\001\002\000\006\003" +
    "\060\006\061\001\002\000\006\003\056\006\057\001\002" +
    "\000\032\003\ufff4\004\ufff4\005\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\014\ufff4\015\ufff4\023\ufff4\024\ufff4\025\ufff4" +
    "\001\002\000\032\003\ufff6\004\ufff6\005\ufff6\010\ufff6\011" +
    "\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\023\ufff6\024\ufff6" +
    "\025\ufff6\001\002\000\032\003\ufff3\004\ufff3\005\ufff3\010" +
    "\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\023\ufff3" +
    "\024\ufff3\025\ufff3\001\002\000\032\003\ufff5\004\ufff5\005" +
    "\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5" +
    "\023\ufff5\024\ufff5\025\ufff5\001\002\000\020\010\063\012" +
    "\044\013\041\014\043\015\040\024\042\025\036\001\002" +
    "\000\012\002\uffdf\020\uffdf\026\uffdf\027\uffdf\001\002\000" +
    "\030\003\065\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\030" +
    "\017\034\020\024\023\uffeb\024\uffeb\025\uffeb\001\002\000" +
    "\004\023\uffec\001\002\000\020\012\044\013\041\014\043" +
    "\015\040\023\uffed\024\042\025\036\001\002\000\012\002" +
    "\uffee\020\uffee\026\uffee\027\uffee\001\002\000\012\002\ufff2" +
    "\020\ufff2\026\ufff2\027\ufff2\001\002\000\006\003\072\020" +
    "\024\001\002\000\004\010\101\001\002\000\014\003\ufff8" +
    "\004\ufff8\005\053\010\ufff8\023\ufff8\001\002\000\010\003" +
    "\076\004\077\010\075\001\002\000\004\023\uffdd\001\002" +
    "\000\004\023\uffdb\001\002\000\004\020\024\001\002\000" +
    "\014\003\ufff9\004\ufff9\005\053\010\ufff9\023\ufff9\001\002" +
    "\000\004\023\uffdc\001\002\000\012\002\ufff0\020\ufff0\026" +
    "\ufff0\027\ufff0\001\002\000\006\004\077\023\ufffc\001\002" +
    "\000\010\020\024\026\023\027\017\001\002\000\012\002" +
    "\uffff\020\024\026\023\027\017\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\104\000\012\002\004\003\007\004\011\005\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\102\007\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\014\005\006" +
    "\007\021\010\017\011\024\012\013\013\020\017\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\021\011\067\012\013\013" +
    "\020\017\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\031\014\061\015\030\001\001\000\010\007\031" +
    "\014\032\015\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\031\015\051\001\001\000" +
    "\002\001\001\000\006\007\031\015\050\001\001\000\006" +
    "\007\031\015\047\001\001\000\006\007\031\015\046\001" +
    "\001\000\006\007\031\015\045\001\001\000\006\007\031" +
    "\015\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\031\014\065\015\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\073\007\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\007" +
    "\021\010\104\011\024\012\013\013\020\017\015\001\001" +
    "\000\014\007\021\011\067\012\013\013\020\017\015\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public void report_error(String message, Object info) {
StringBuffer m = new StringBuffer(message);
if (info instanceof Symbol) {
if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
int line = (((Symbol)info).left)+1;
int column = (((Symbol)info).right)+1;
m.append(" (line "+line+", column "+column+")");
}
}
System.err.println(m);
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declaration_list SC construct_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= error SC construct_list 
            {
              Object RESULT =null;
		 System.out.println("Error in declarations section"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration_list ::= declaration_list SC declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration_list ::= declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= type varlist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type ::= DOUBLE_TYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= INT_TYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // varlist ::= varlist C element 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varlist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // varlist ::= element 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varlist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // element ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("element",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // element ::= element OSBRACKET INT CSBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("element",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // element ::= element OSBRACKET ID CSBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("element",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // element ::= element OSBRACKET INT error 
            {
              Object RESULT =null;
		 System.out.println("Missing close parenthesis in array access"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("element",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // element ::= element OSBRACKET ID error 
            {
              Object RESULT =null;
		 System.out.println("Missing close parenthesis in array access"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("element",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // construct_list ::= construct_list construct 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("construct_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // construct_list ::= construct 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("construct_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // construct ::= assignment SC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("construct",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // construct ::= condition_construct 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("construct",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // construct ::= function SC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("construct",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // assignment ::= element EQ operation_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // assignment ::= element EQ error 
            {
              Object RESULT =null;
		 System.out.println("Error in assignment"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operation_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operation_list ::= operation_list PLUS operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operation_list ::= operation_list MINUS operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operation_list ::= operation_list STAR operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operation_list ::= operation_list DIVIDED operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operation_list ::= operation_list BIGGER operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operation_list ::= operation_list SMALLER operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operation_list ::= operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operation ::= element 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operation ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operation ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condition_construct ::= COND OBRACKET operation_list CBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition_construct",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condition_construct ::= COND error operation_list CBRACKET 
            {
              Object RESULT =null;
		 System.out.println("Missing open parenthesis in if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition_construct",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condition_construct ::= COND OBRACKET operation_list error 
            {
              Object RESULT =null;
		 System.out.println("Missing close parenthesis in if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition_construct",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // function ::= PRINTFUNC OBRACKET varlist CBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // function ::= PRINTFUNC OBRACKET error CBRACKET 
            {
              Object RESULT =null;
		 System.out.println("Error in print function"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // function ::= PRINTFUNC OBRACKET varlist error 
            {
              Object RESULT =null;
		 System.out.println("Error in print function"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
