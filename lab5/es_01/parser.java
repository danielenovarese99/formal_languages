
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\035\000\002\002\004\000\002\002\004\000\002\004" +
    "\004\000\002\004\005\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\007\005\000" +
    "\002\007\005\000\002\011\003\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\014" +
    "\003\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\012\005\000\002\013\003\000\002" +
    "\013\007\000\002\013\007\000\002\013\007\000\002\013" +
    "\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\076\000\012\004\017\005\005\006\004\010\014\001" +
    "\002\000\014\017\066\020\065\021\ufff7\023\064\025\067" +
    "\001\002\000\016\014\077\017\uffe9\020\uffe9\021\uffe9\023" +
    "\uffe9\025\uffe9\001\002\000\004\021\ufffd\001\002\000\014" +
    "\017\056\020\055\021\ufff2\023\054\025\057\001\002\000" +
    "\004\024\053\001\002\000\004\021\051\001\002\000\004" +
    "\021\ufffc\001\002\000\004\021\ufffa\001\002\000\006\004" +
    "\036\006\035\001\002\000\004\002\034\001\002\000\004" +
    "\021\ufffb\001\002\000\014\014\020\017\023\020\022\022" +
    "\024\023\021\001\002\000\006\004\026\006\025\001\002" +
    "\000\006\004\026\006\025\001\002\000\006\004\026\006" +
    "\025\001\002\000\006\004\026\006\025\001\002\000\006" +
    "\004\026\006\025\001\002\000\004\021\ufff7\001\002\000" +
    "\012\017\023\020\022\022\024\023\021\001\002\000\004" +
    "\021\ufff5\001\002\000\004\021\ufff3\001\002\000\004\021" +
    "\ufff4\001\002\000\004\021\ufff6\001\002\000\004\021\ufff9" +
    "\001\002\000\004\002\001\001\002\000\004\007\044\001" +
    "\002\000\004\007\037\001\002\000\006\004\041\006\040" +
    "\001\002\000\004\011\043\001\002\000\004\011\042\001" +
    "\002\000\014\017\uffe8\020\uffe8\021\uffe8\023\uffe8\025\uffe8" +
    "\001\002\000\014\017\uffe5\020\uffe5\021\uffe5\023\uffe5\025" +
    "\uffe5\001\002\000\006\004\046\006\045\001\002\000\004" +
    "\011\050\001\002\000\004\011\047\001\002\000\014\017" +
    "\uffe7\020\uffe7\021\uffe7\023\uffe7\025\uffe7\001\002\000\014" +
    "\017\uffe6\020\uffe6\021\uffe6\023\uffe6\025\uffe6\001\002\000" +
    "\014\004\017\005\005\006\004\010\014\024\uffff\001\002" +
    "\000\004\024\ufffe\001\002\000\004\002\000\001\002\000" +
    "\010\005\063\006\060\010\014\001\002\000\010\005\063" +
    "\006\060\010\014\001\002\000\010\005\063\006\060\010" +
    "\014\001\002\000\010\005\063\006\060\010\014\001\002" +
    "\000\012\017\066\020\065\023\064\025\067\001\002\000" +
    "\012\017\056\020\055\021\ufff2\023\054\001\002\000\004" +
    "\021\uffea\001\002\000\012\017\uffe9\020\uffe9\021\uffe9\023" +
    "\uffe9\001\002\000\010\005\063\006\060\010\014\001\002" +
    "\000\010\005\063\006\060\010\014\001\002\000\010\005" +
    "\063\006\060\010\014\001\002\000\010\005\063\006\060" +
    "\010\014\001\002\000\004\021\uffed\001\002\000\004\021" +
    "\uffeb\001\002\000\004\021\uffec\001\002\000\004\021\uffee" +
    "\001\002\000\004\021\uffef\001\002\000\004\021\ufff0\001" +
    "\002\000\004\021\ufff1\001\002\000\010\005\063\006\060" +
    "\010\014\001\002\000\004\021\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\076\000\022\002\014\003\010\004\007\007\005\011" +
    "\011\012\012\013\006\014\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\032\001\001\000\004" +
    "\011\031\001\001\000\004\011\030\001\001\000\004\011" +
    "\027\001\001\000\004\011\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\010\004\051\007\005\011\011\012\012\013\006\014" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\060\014\075\001\001\000\006\013\060\014\074\001" +
    "\001\000\006\013\060\014\073\001\001\000\006\013\060" +
    "\014\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\060\014\072" +
    "\001\001\000\006\013\060\014\071\001\001\000\006\013" +
    "\060\014\070\001\001\000\006\013\060\014\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\060\014\077\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    symbolTable = new HashMap<String, Double>();
    vectorTable = new HashMap<String, Double[]>();

    }


    public HashMap <String, Double>symbolTable;
    public HashMap <String, Double[]> vectorTable;

    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (line "+line+", column "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= calculator EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // calculator ::= operationList QM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("calculator",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // operationList ::= operation SC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // operationList ::= operation SC operationList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // operation ::= assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // operation ::= scalar_expression 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Scalar expression: " + x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // operation ::= vector_expression 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] x = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Vector expression : [" + x[0] + "," + x[1] + "]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // operation ::= vector_scalar_expression 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Vector scalar expression : " + x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // assignment ::= SCALARVAR EQ scalar_expression 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.symbolTable.put(x,y); RESULT = y;System.out.println("Scalar assignment = " + y); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // assignment ::= VECTORVAR EQ vector_expression 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] y = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.vectorTable.put(x,y);RESULT = y;System.out.println("Vector assignment = [ " + y[0] + " , " + y[1] + " ]"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // scalar_expression ::= NUM 
            {
              Double RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = x;System.out.println("result is" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // scalar_expression ::= SCALARVAR STAR scalar_expression 
            {
              Double RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = parser.symbolTable.get(x) * y;System.out.println("moltiplication result is" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // scalar_expression ::= SCALARVAR DIVIDED scalar_expression 
            {
              Double RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = parser.symbolTable.get(x) / y;System.out.println("division result is" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // scalar_expression ::= SCALARVAR PLUS scalar_expression 
            {
              Double RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = parser.symbolTable.get(x) + y; System.out.println("addition result is" + RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // scalar_expression ::= SCALARVAR MINUS scalar_expression 
            {
              Double RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = parser.symbolTable.get(x) - y; System.out.println("subtraction result is" + RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // vector_expression ::= vector 
            {
              Double[] RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] y = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = y;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // vector_expression ::= vector STAR vector_expression 
            {
              Double[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] x = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] y = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = x; x[0] = x[0] * y[0]; x[1] = x[1] * y[1]; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // vector_expression ::= vector PLUS vector_expression 
            {
              Double[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] x = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] y = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = y; y[0] = y[0] + x[0]; y[1] = y[1] + x[1]; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // vector_expression ::= vector MINUS vector_expression 
            {
              Double[] RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // vector_expression ::= NUM STAR vector_expression 
            {
              Double[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] y = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = y; y[0] = y[0] * x; y[1] = y[1] * x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // vector_expression ::= NUM DOT vector_expression 
            {
              Double[] RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // vector_expression ::= NUM PLUS vector_expression 
            {
              Double[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] y = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = y; y[0] = y[0] + x; y[1] = y[1] + x;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // vector_expression ::= NUM MINUS vector_expression 
            {
              Double[] RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // vector_scalar_expression ::= vector DOT vector_expression 
            {
              Double RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] x = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] y = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		x[0] = x[0] * y[0]; x[1] = x[1] + y[1];x[0] = x[0] + x[1]; RESULT = x[0]; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_scalar_expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // vector ::= VECTORVAR 
            {
              Double[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = parser.vectorTable.get(x);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // vector ::= OSBRACKET SCALARVAR C SCALARVAR CSBRACKET 
            {
              Double[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Double[2];RESULT[0] = new Double(parser.symbolTable.get(x));RESULT[1] = new Double(parser.symbolTable.get(y));    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // vector ::= OSBRACKET NUM C SCALARVAR CSBRACKET 
            {
              Double[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Double[2];RESULT[0] = new Double(x);RESULT[1] = new Double(parser.symbolTable.get(y));    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // vector ::= OSBRACKET NUM C NUM CSBRACKET 
            {
              Double[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Double[2];RESULT[0] = new Double(x);RESULT[1] = new Double(y);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // vector ::= OSBRACKET SCALARVAR C NUM CSBRACKET 
            {
              Double[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Double[2];RESULT[0] = new Double(parser.symbolTable.get(x));RESULT[1] = new Double(y);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
